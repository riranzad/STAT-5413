[
["day-2.html", "Chapter 3 Day 2 3.1 Spatial Data 3.2 Types of spatial data 3.3 Textbook package", " Chapter 3 Day 2 3.1 Spatial Data All data occur at some location is space and time. For know we focus on spatial analyses and will later extend this to spatio-temporal analyses. Let \\(\\mathcal{D}\\) represent the spatial domain and let \\(\\mathbf{s}\\) be a spatial location. In general, we will let \\(\\mathcal{A} \\subset \\mathcal{D}\\) be a subdomain of the spatial region of \\(\\mathbf{D}\\). Insert Diagram from class here 3.2 Types of spatial data There are three primary types of spatial data that we are going to consider Geostatistical data Occur everywhere continuous support examples: temperature, precipitation Areal data Occur only over discrete areas can be thought of as an integral of a continuous process over a subdomain \\(\\mathcal{A} \\in \\mathcal{D}\\) examples: cases of a disease by counties, votes in an election by congressional district Point process data The count and location of the data are random examples: tornados, lightning strikes library(tidyverse) library(here) Many different file types for spatial data Typically data are in “flat files” like comma-seperated value (CSV) files read.csv(here(&quot;path&quot;, &quot;to&quot;, &quot;file.csv&quot;)) “shapefiles” which can be read using rgdal or maptools packages library(rgdal) library(maptools) “NetCDF” files cane be read using ncdf4 or RNetCDF library(ncdf4) library(RNetCDF) 3.3 Textbook package To install the data from the textbook, go to https://spacetimewithr.org/ and follow the link to the code. # install.packages(&quot;devtools&quot;) library(devtools) install_github(&quot;andrewzm/STRbook&quot;) Note that this package is relatively large because it contains a decent amount of spatial data. library(STRbook) 3.3.1 In Class Activity: From Lab 2.1 on the textbook site ## Wikle, C. K., Zammit-Mangion, A., and Cressie, N. (2019), ## Spatio-Temporal Statistics with R, Boca Raton, FL: Chapman &amp; Hall/CRC ## Copyright (c) 2019 Wikle, Zammit-Mangion, Cressie ## ## This program is free software; you can redistribute it and/or ## modify it under the terms of the GNU General Public License ## as published by the Free Software Foundation; either version 2 ## of the License, or (at your option) any later version. ## ## This program is distributed in the hope that it will be useful, ## but WITHOUT ANY WARRANTY; without even the implied warranty of ## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the ## GNU General Public License for more details. library(&quot;dplyr&quot;) library(&quot;tidyr&quot;) library(&quot;STRbook&quot;) ## ------------------------------------------------------------------------ locs &lt;- read.table(system.file(&quot;extdata&quot;, &quot;Stationinfo.dat&quot;, package = &quot;STRbook&quot;), col.names = c(&quot;id&quot;, &quot;lat&quot;, &quot;lon&quot;)) Times &lt;- read.table(system.file(&quot;extdata&quot;, &quot;Times_1990.dat&quot;, package = &quot;STRbook&quot;), col.names = c(&quot;julian&quot;, &quot;year&quot;, &quot;month&quot;, &quot;day&quot;)) Tmax &lt;- read.table(system.file(&quot;extdata&quot;, &quot;Tmax_1990.dat&quot;, package = &quot;STRbook&quot;)) ## ------------------------------------------------------------------------ names(Tmax) &lt;- locs$id ## ------------------------------------------------------------------------ Tmax &lt;- cbind(Times, Tmax) head(names(Tmax), 10) ## [1] &quot;julian&quot; &quot;year&quot; &quot;month&quot; &quot;day&quot; &quot;3804&quot; &quot;3809&quot; &quot;3810&quot; &quot;3811&quot; ## [9] &quot;3812&quot; &quot;3813&quot; ## ------------------------------------------------------------------------ Tmax_long &lt;- gather(Tmax, id, z, -julian, -year, -month, -day) head(Tmax_long) ## julian year month day id z ## 1 726834 1990 1 1 3804 35 ## 2 726835 1990 1 2 3804 42 ## 3 726836 1990 1 3 3804 49 ## 4 726837 1990 1 4 3804 59 ## 5 726838 1990 1 5 3804 41 ## 6 726839 1990 1 6 3804 45 ## ------------------------------------------------------------------------ Tmax_long$id &lt;- as.integer(Tmax_long$id) ## ----------------------------------------------------------- nrow(Tmax_long) ## [1] 479208 Tmax_long &lt;- filter(Tmax_long, !(z &lt;= -9998)) nrow(Tmax_long) ## [1] 196253 ## ------------------------------------------------------------------------ Tmax_long &lt;- mutate(Tmax_long, proc = &quot;Tmax&quot;) head(Tmax_long) ## julian year month day id z proc ## 1 726834 1990 1 1 3804 35 Tmax ## 2 726835 1990 1 2 3804 42 Tmax ## 3 726836 1990 1 3 3804 49 Tmax ## 4 726837 1990 1 4 3804 59 Tmax ## 5 726838 1990 1 5 3804 41 Tmax ## 6 726839 1990 1 6 3804 45 Tmax ## ------------------------------------------------------------------------ data(Tmin_long, package = &quot;STRbook&quot;) data(TDP_long, package = &quot;STRbook&quot;) data(Precip_long, package = &quot;STRbook&quot;) ## ------------------------------------------------------------------------ NOAA_df_1990 &lt;- rbind(Tmax_long, Tmin_long, TDP_long, Precip_long) ## ------------------------------------------------------------------------ summ &lt;- group_by(NOAA_df_1990, year, proc) %&gt;% # groupings summarise(mean_proc = mean(z)) # operation ## ------------------------------------------------------------------------ NOAA_precip &lt;- filter(NOAA_df_1990, proc == &quot;Precip&quot; &amp; month == 6) summ &lt;- group_by(NOAA_precip, year, id) %&gt;% summarise(days_no_precip = sum(z == 0)) head(summ) ## # A tibble: 6 x 3 ## # Groups: year [1] ## year id days_no_precip ## &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 1990 3804 19 ## 2 1990 3810 26 ## 3 1990 3811 21 ## 4 1990 3812 24 ## 5 1990 3813 25 ## 6 1990 3816 23 ## ------------------------------------------------------------------------ median(summ$days_no_precip) ## [1] 20 ## ------------------------------------------------------------- grps &lt;- group_by(NOAA_precip, year, id) summ &lt;- summarise(grps, days_no_precip = sum(z == 0)) ## ------------------------------------------------------------------------ NOAA_df_sorted &lt;- arrange(NOAA_df_1990, julian, id) ## ------------------------------------------------------------------------ df1 &lt;- select(NOAA_df_1990, julian, z) df2 &lt;- select(NOAA_df_1990, -julian) ## ------------------------------------------------------------------------ NOAA_df_1990 &lt;- left_join(NOAA_df_1990, locs, by = &quot;id&quot;) ## ------------------------------------------------------------------------ Tmax_long_sel &lt;- select(Tmax_long, julian, id, z) Tmax_wide &lt;- spread(Tmax_long_sel, id, z) dim(Tmax_wide) ## [1] 1461 138 ## ------------------------------------------------------------------------ M &lt;- select(Tmax_wide, -julian) %&gt;% as.matrix() ## ----------------------------------------------------------- library(&quot;sp&quot;) library(&quot;spacetime&quot;) ## Registered S3 method overwritten by &#39;xts&#39;: ## method from ## as.zoo.xts zoo ## ------------------------------------------------------------------------ NOAA_df_1990$date &lt;- with(NOAA_df_1990, paste(year, month, day, sep = &quot;-&quot;)) head(NOAA_df_1990$date, 4) # show first four elements ## [1] &quot;1990-1-1&quot; &quot;1990-1-2&quot; &quot;1990-1-3&quot; &quot;1990-1-4&quot; ## ------------------------------------------------------------------------ NOAA_df_1990$date &lt;- as.Date(NOAA_df_1990$date) class(NOAA_df_1990$date) ## [1] &quot;Date&quot; ## ------------------------------------------------------------------------ Tmax_long2 &lt;- filter(NOAA_df_1990, proc == &quot;Tmax&quot;) STObj &lt;- stConstruct(x = Tmax_long2, # data set space = c(&quot;lon&quot;, &quot;lat&quot;), # spatial fields time = &quot;date&quot;) # time field class(STObj) ## [1] &quot;STIDF&quot; ## attr(,&quot;package&quot;) ## [1] &quot;spacetime&quot; ## ------------------------------------------------------------------------ spat_part &lt;- SpatialPoints(coords = Tmax_long2[, c(&quot;lon&quot;, &quot;lat&quot;)]) temp_part &lt;- Tmax_long2$date STObj2 &lt;- STIDF(sp = spat_part, time = temp_part, data = select(Tmax_long2, -date, -lon, -lat)) class(STObj2) ## [1] &quot;STIDF&quot; ## attr(,&quot;package&quot;) ## [1] &quot;spacetime&quot; ## ------------------------------------------------------------------------ spat_part &lt;- SpatialPoints(coords = locs[, c(&quot;lon&quot;, &quot;lat&quot;)]) temp_part &lt;- with(Times, paste(year, month, day, sep = &quot;-&quot;)) temp_part &lt;- as.Date(temp_part) ## ------------------------------------------------------------------------ Tmax_long3 &lt;- gather(Tmax, id, z, -julian, -year, -month, -day) ## ------------------------------------------------------------------------ Tmax_long3$id &lt;- as.integer(Tmax_long3$id) Tmax_long3 &lt;- arrange(Tmax_long3,julian,id) ## ------------------------------------------------------------------------ all(unique(Tmax_long3$id) == locs$id) ## [1] TRUE ## ------------------------------------------------------------------------ STObj3 &lt;- STFDF(sp = spat_part, time = temp_part, data = Tmax_long3) class(STObj3) ## [1] &quot;STFDF&quot; ## attr(,&quot;package&quot;) ## [1] &quot;spacetime&quot; ## ------------------------------------------------------------------------ proj4string(STObj3) &lt;- CRS(&quot;+proj=longlat +ellps=WGS84&quot;) ## ------------------------------------------------------------------------ STObj3$z[STObj3$z == -9999] &lt;- NA "]
]
